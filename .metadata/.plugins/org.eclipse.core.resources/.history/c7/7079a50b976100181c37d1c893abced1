package view;

import java.awt.FlowLayout;
import java.util.Collection;
import java.util.Iterator;

import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JToolBar;

import controller.HouseRollListener;
import controller.PlaceBetListener;
import controller.RollListener;
import controller.SelectPlayerListener;
import model.interfaces.GameEngine;
import model.interfaces.Player;

@SuppressWarnings("serial")
public class ToolBar extends JToolBar {
	private JButton placeBetButton = new JButton("Place Bet");
	private JButton rollButton = new JButton("Roll Dice");
	private JButton rollHouseButton = new JButton("Roll House");
	private JComboBox<String> comboBox = new JComboBox<String>();
	SelectPlayerListener selectPlayerListener;

	public ToolBar(GameEngine gameEngine, AppFrame frame) {
		add(placeBetButton);
		add(rollButton);
		add(rollHouseButton);
		add(comboBox);
		setLayout(new FlowLayout(FlowLayout.LEFT));
		selectPlayerListener = new SelectPlayerListener(gameEngine, frame);
		comboBox.addActionListener(selectPlayerListener);
		PlaceBetListener placeBetListener = new PlaceBetListener(gameEngine, frame);
		placeBetButton.addActionListener(placeBetListener);
		RollListener rollListener = new RollListener(gameEngine, frame);
		rollButton.addActionListener(rollListener);
		HouseRollListener houseRollListener = new HouseRollListener(gameEngine, frame);
		rollHouseButton.addActionListener(houseRollListener);
	}

	public void updatePlayers(GameEngine gameEngine) {
		comboBox.removeActionListener(selectPlayerListener);
		comboBox.removeAllItems();
		Collection<Player> players = gameEngine.getAllPlayers();
		Player player;
		Iterator<Player> iterator = players.iterator();
		while (iterator.hasNext()) {
			player = iterator.next();
			comboBox.addItem(player.toString());
		}
		comboBox.addActionListener(selectPlayerListener);
	}

	public Player getPlayer(GameEngine gameEngine) {
		String player = (String)comboBox.getSelectedItem();
		Player playing;
		player.toString();
		Collection<Player> players = gameEngine.getAllPlayers();
		Iterator<Player> iterator = players.iterator();
		while (iterator.hasNext()) {
			Player test = iterator.next();
			if (test.toString().equals(player)) {
				playing = test;
				return playing;
			}
		}
		return null;
	}

}
